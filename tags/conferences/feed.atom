<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Recent Blog Posts</title>
  <id>http://oddbird.net/feed.atom</id>
  <updated>2014-10-01T00:00:00Z</updated>
  <link href="http://oddbird.net/" />
  <link href="http://oddbird.net/feed.atom" rel="self" />
  <subtitle type="text">Recent blog posts</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://oddbird.net/feed.atom">
    <title type="text">SassConf 2014</title>
    <id>http://oddbird.net/2014/10/01/sassconf</id>
    <updated>2014-10-01T00:00:00Z</updated>
    <link href="http://oddbird.net/2014/10/01/sassconf" />
    <author>
      <name>OddBird</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://sassconf.com/" style="float: left; margin: 0 1rem 1rem 0;"&gt;
  &lt;img src="/static/images/blog/sassconf.jpeg" alt="SassConf" /&gt;
&lt;/a&gt; &lt;a class="reference external" href="http://sassconf.com/"&gt;SassConf&lt;/a&gt; starts tomorrow
at the Scholastic Auditorium in New York!
We&amp;#8217;re damn proud to be sponsoring such a great event,
and even more proud this year to have
&lt;a class="reference external" href="/birds/#bio--claudina"&gt;one of the organizers&lt;/a&gt; on our&amp;nbsp;team.&lt;/p&gt;
&lt;p&gt;&lt;div style="clear: left;"&gt;&lt;/div&gt; But who cares about pride,
I have a flight to catch!
See you all in&amp;nbsp;SoHo!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://oddbird.net/feed.atom">
    <title type="text">jQuery Chicago 2014</title>
    <id>http://oddbird.net/2014/09/17/jqcon</id>
    <updated>2014-09-17T00:00:00Z</updated>
    <link href="http://oddbird.net/2014/09/17/jqcon" />
    <author>
      <name>OddBird</name>
    </author>
    <content type="html">&lt;p&gt;After attending conferences, I find it helpful to synthesize a few practical
takeaways that I can immediately begin working into my code. Some of them are
new, while others are common techniques that I&amp;#8217;m just not in the habit of&amp;nbsp;doing.&lt;/p&gt;
&lt;p&gt;So what got my attention at &lt;a class="reference external" href="http://events.jquery.org/2014/chicago/"&gt;jQuery Conference Chicago 2014&lt;/a&gt;? In no
particular&amp;nbsp;order:&lt;/p&gt;
&lt;section id="web-workers"&gt;
&lt;h2&gt;Web&amp;nbsp;Workers&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/Guide/Performance/Using_web_workers"&gt;Web Workers&lt;/a&gt; are here and ready for primetime (or at least
&lt;a class="reference external" href="http://caniuse.com/#feat=webworkers"&gt;close enough to ready&lt;/a&gt;). It would be nice to get some abstractions to make
them easier to work with (and it&amp;#8217;ll be great when &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker"&gt;SharedWorkers&lt;/a&gt; and
&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker_API"&gt;ServiceWorkers&lt;/a&gt; get to the same level of &lt;a class="reference external" href="http://caniuse.com/#feat=sharedworkers"&gt;support&lt;/a&gt;), but I&amp;#8217;m not waiting&amp;nbsp;around.&lt;/p&gt;
&lt;p&gt;Basically, Workers provide the ability to run computationally intensive tasks
in a background thread, without blocking the &lt;span class="caps"&gt;UI&lt;/span&gt; or other scripts. Workers don&amp;#8217;t
have access to the &lt;code&gt;window&lt;/code&gt; object or the &lt;span class="caps"&gt;DOM&lt;/span&gt;, but they can pass data back
and forth from the main client&amp;nbsp;script.&lt;/p&gt;
&lt;p&gt;Keep the &lt;span class="caps"&gt;UI&lt;/span&gt; responsive, and let Workers do difficult tasks in the background.
(Aside: This is awesome. Why isn&amp;#8217;t everyone using it&amp;nbsp;already?)&lt;/p&gt;
&lt;pre class="code js"&gt;
&lt;span class="c1"&gt;// main script
&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'my_worker.js'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'The worker said: '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello Worker!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code js"&gt;
&lt;span class="c1"&gt;// worker script ('my_worker.js')
&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'The client said: '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello Client!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Check out &lt;a class="reference external" href="http://codepen.io/jgerigmeyer/pen/vKixI"&gt;another (contrived) example&lt;/a&gt; to see it in action. Notice that the
timer (and the entire &lt;span class="caps"&gt;UI&lt;/span&gt;) locks up while running the task without Workers, but
continues smoothly when Workers are used. (I&amp;#8217;m also using the
&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/API/Blob.Blob"&gt;Blob() constructor&lt;/a&gt; to allow for inline Worker scripts, instead of importing
from another&amp;nbsp;file.)&lt;/p&gt;
&lt;p&gt;So when might I actually use Workers? From this helpful &lt;a class="reference external" href="http://www.html5rocks.com/en/tutorials/workers/basics/"&gt;&lt;span class="caps"&gt;HTML5&lt;/span&gt; Rocks article&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;
- Prefetching and/or caching data for later use
- Code syntax highlighting or other real-time text formatting
- Spell checker
- Analyzing video or audio data
- Background I/O or polling of webservices
- Processing large arrays or humungous JSON responses
- Image filtering in &amp;lt;canvas&amp;gt;
- Updating many rows of a local web database
&lt;/pre&gt;
&lt;p&gt;Do you already use Web Workers, or have additional suggestions or&amp;nbsp;warnings?&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;HT&lt;/span&gt;: &lt;a class="reference external" href="http://twitter.com/potch"&gt;&amp;#64;potch&lt;/a&gt; for the &lt;a class="reference external" href="http://potch.github.io/workers-talk/"&gt;talk&lt;/a&gt;
that got me&amp;nbsp;started.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ecmascript-6"&gt;
&lt;h2&gt;ECMAScript&amp;nbsp;6&lt;/h2&gt;
&lt;p&gt;You know what else is here, and (mostly) ready for primetime? &lt;a class="reference external" href="http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#draft_specification_for_es.next_ecma-262_edition_6"&gt;ECMAScript 6&lt;/a&gt;.
Some of the new features I&amp;#8217;m most excited&amp;nbsp;about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;String.prototype.contains()&lt;/code&gt; instead of &lt;code&gt;indexOf()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;native&amp;nbsp;promises&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.assign()&lt;/code&gt; for merging&amp;nbsp;objects&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Map()&lt;/code&gt; and &lt;code&gt;Set()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;blocked scope variables using &lt;code&gt;let&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;template&amp;nbsp;strings(!):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code js"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Jonny'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;company&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'OddBird'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;company&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;default function&amp;nbsp;parameters&lt;/li&gt;
&lt;li&gt;modules, exports, and a system&amp;nbsp;loader&lt;/li&gt;
&lt;li&gt;expanded &lt;code&gt;class&lt;/code&gt; syntax&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This just scratches the surface. Check out a &lt;a class="reference external" href="http://git.io/es6features"&gt;helpful summary&lt;/a&gt;, and keep a
close eye on the &lt;a class="reference external" href="http://kangax.github.io/compat-table/es6/"&gt;browser support&amp;nbsp;chart&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So how can I use these features without waiting for full browser&amp;nbsp;implementation?&lt;/p&gt;
&lt;p&gt;A subset of &lt;span class="caps"&gt;ES6&lt;/span&gt; can be used by simply adding Paul Miller&amp;#8217;s &lt;a class="reference external" href="http://github.com/paulmillr/es6-shim/"&gt;&lt;span class="caps"&gt;ES6&lt;/span&gt; Shim&lt;/a&gt;. To use
the more substantive features (e.g. template strings, default parameters,
modules), compile &lt;span class="caps"&gt;ES6&lt;/span&gt; code into &lt;span class="caps"&gt;ES5&lt;/span&gt; using Google&amp;#8217;s &lt;a class="reference external" href="http://github.com/google/traceur-compiler"&gt;Traceur&lt;/a&gt; (probably with
&lt;a class="reference external" href="http://github.com/sindresorhus/gulp-traceur"&gt;gulp-traceur&lt;/a&gt; or &lt;a class="reference external" href="http://github.com/aaronfrost/grunt-traceur"&gt;grunt-traceur&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;HT&lt;/span&gt;: &lt;a class="reference external" href="http://twitter.com/johnkpaul"&gt;John K. Paul&lt;/a&gt; for his
&lt;a class="reference external" href="http://johnkpaul.github.io/presentations/jqcon/2014/es6-now/"&gt;talk&lt;/a&gt;
encouraging devs to use &lt;span class="caps"&gt;ES6&lt;/span&gt;&amp;nbsp;now.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="throw-more-errors"&gt;
&lt;h2&gt;Throw More&amp;nbsp;Errors&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error"&gt;Error objects&lt;/a&gt; have been around forever, and aren&amp;#8217;t difficult to&amp;nbsp;use:&lt;/p&gt;
&lt;pre class="code js"&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do the thing
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'User &lt;span class="caps"&gt;ID&lt;/span&gt; not found.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;But I&amp;#8217;m not very good at actually doing this. When I&amp;#8217;m writing code, I usually
default to the &amp;#8220;fail silently&amp;#8221;&amp;nbsp;approach:&lt;/p&gt;
&lt;pre class="code js"&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do the thing
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;There are times when failing silently is exactly what I want: when the code
will continue to work correctly regardless. But often it&amp;#8217;d be better
(especially in development, and maybe even in production) to throw an error
with a descriptive message stating what went wrong. Not only does this speed
debugging, but it also lets me know that something went wrong in the first&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;To make this simpler, I&amp;#8217;ve started using runtime&amp;nbsp;assertions:&lt;/p&gt;
&lt;pre class="code js"&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;assert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Assertion failed: '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'User has an &lt;span class="caps"&gt;ID&lt;/span&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;When to consider throwing&amp;nbsp;Errors?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;When a function requires a specific argument&amp;nbsp;type&lt;/li&gt;
&lt;li&gt;When a function requires a specific number of&amp;nbsp;arguments&lt;/li&gt;
&lt;li&gt;For unexpected code paths (i.e. code that should never be&amp;nbsp;executed)&lt;/li&gt;
&lt;li&gt;When using promises (every promise should have an error handler using
&lt;code&gt;.catch()&lt;/code&gt; or &lt;code&gt;.then()&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="caps"&gt;HT&lt;/span&gt;: &lt;a class="reference external" href="http://twitter.com/rlph"&gt;Ralph Holzmann&lt;/a&gt; for his helpful
&lt;a class="reference external" href="http://blog.ralphholzmann.com/presentations/2014/jquerychicago/throw_new_error.pdf"&gt;talk&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="debugging-by-proxy"&gt;
&lt;h2&gt;Debugging by&amp;nbsp;Proxy&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://twitter.com/brianarn"&gt;Brian Arnold&lt;/a&gt; &lt;a class="reference external" href="http://www.randomthink.net/presentations/jqcon-chicago-2014-beyond-devtools/presentation/"&gt;demoed&lt;/a&gt; how to use proxy tools for development and&amp;nbsp;debugging.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.charlesproxy.com/"&gt;Charles&lt;/a&gt; is a really powerful tool for anything from Ajax debugging and
bandwidth throttling to &lt;span class="caps"&gt;DNS&lt;/span&gt; spoofing and local/remote resource mapping. I can
view or modify outgoing requests or incoming responses (even from another
device on the same network connected through Charles), essentially turn my
computer into a dev environment for any website with resource mapping, throttle
my bandwidth to mimic 3G or &lt;span class="caps"&gt;LTE&lt;/span&gt;, or disable caching or cookies&amp;nbsp;entirely.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="js-testing-with-intern"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;JS&lt;/span&gt; Testing With&amp;nbsp;Intern&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve been using &lt;a class="reference external" href="http://karma-runner.github.io/"&gt;Karma&lt;/a&gt; as a test-runner, and I&amp;#8217;m mostly satisfied with what
it can do (notably: run tests quickly using &lt;a class="reference external" href="http://phantomjs.org/"&gt;PhantomJS&lt;/a&gt; to mimic a browser
environment, and generate &lt;a class="reference external" href="http://gotwarlost.github.io/istanbul/"&gt;istanbul&lt;/a&gt; coverage&amp;nbsp;reports).&lt;/p&gt;
&lt;p&gt;But I&amp;#8217;m intrigued by some of the features that &lt;a class="reference external" href="http://theintern.io/"&gt;Intern&lt;/a&gt; offers (notably:
integration with &lt;a class="reference external" href="http://www.seleniumhq.org/"&gt;Selenium&lt;/a&gt;, support for true browser events and running tests
in standalone browsers, and built-in &lt;a class="reference external" href="https://travis-ci.com/"&gt;Travis &lt;span class="caps"&gt;CI&lt;/span&gt;&lt;/a&gt;&amp;nbsp;integration).&lt;/p&gt;
&lt;p&gt;Have you used either of these tools, or have further pros/cons to&amp;nbsp;offer?&lt;/p&gt;
&lt;/section&gt;
</content>
  </entry>
</feed>

