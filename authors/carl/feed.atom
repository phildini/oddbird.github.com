<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Recent Blog Posts</title>
  <id>http://oddbird.net/feed.atom</id>
  <updated>2014-09-23T00:00:00Z</updated>
  <link href="http://oddbird.net/" />
  <link href="http://oddbird.net/feed.atom" rel="self" />
  <subtitle type="text">Recent blog posts</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://oddbird.net/feed.atom">
    <title type="text">Python for Ada</title>
    <id>http://oddbird.net/2014/09/23/python-supports-the-ada-initiative</id>
    <updated>2014-09-23T00:00:00Z</updated>
    <link href="http://oddbird.net/2014/09/23/python-supports-the-ada-initiative" />
    <author>
      <name>OddBird</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a class="reference external" href="https://supportada.org/?campaign=python"&gt;&lt;img width="600" height="175" src="https://adainitiative.org/counters/2014counter-python.svg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://supportada.org/?campaign=python"&gt;&lt;img style="float: right;" src="/static/images/blog/Ada-Initiative-color-sticker-208x300.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://supportada.org/?campaign=python"&gt;Donate&lt;/a&gt; to the &lt;a class="reference external" href="http://adainitiative.org/"&gt;Ada Initiative&lt;/a&gt; today to support women in open technology
and culture. If we hit &lt;strong&gt;$10,000&lt;/strong&gt; by Friday, &lt;a class="reference external" href="http://jacobian.org/"&gt;Jacob&lt;/a&gt; and &lt;a class="reference external" href="http://alexgaynor.net/"&gt;Alex&lt;/a&gt; and &lt;a class="reference external" href="http://blog.geekdaily.org"&gt;Jim
Meyer&lt;/a&gt; and I will match your donations to make it a nice round &lt;strong&gt;$20k&lt;/strong&gt;. Life
is short, go &lt;a class="reference external" href="https://supportada.org/?campaign=python"&gt;donate now&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;(&lt;strong&gt;Update&lt;/strong&gt;: Shortly after we announced this drive, &lt;a class="reference external" href="http://blog.geekdaily.org"&gt;Jim Meyer&lt;/a&gt;  &lt;a class="reference external" href="https://twitter.com/purp/status/514453504253886464"&gt;pitched in&lt;/a&gt;
to raise the match amount from $7500 to $10,000!&amp;nbsp;Awesome!)&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve spent most of my working life with Python and open technology. Python and
open source have been good to me. They&amp;#8217;ve helped me &lt;a class="reference external" href="http://oddbird.net/2013/12/30/sixth-year/"&gt;start a company&lt;/a&gt;, &lt;a class="reference external" href="http://pyvideo.org/speaker/35/carl-meyer"&gt;become
a public speaker&lt;/a&gt;, be &lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/internals/team/"&gt;recognized for my contributions&lt;/a&gt;, and make friends all
over the&amp;nbsp;world.&lt;/p&gt;
&lt;p&gt;I attended my first PyCon in 2008, and I&amp;#8217;ve been to every one since. I gave my
&lt;a class="reference external" href="http://pyvideo.org/video/389/pycon-2011--reverse-engineering-ian-bicking--39-s"&gt;first PyCon talk&lt;/a&gt; in 2011. That year, 1% of the talks were by women;
ninety-five out of ninety-six by men. Being one of those ninety-five helped me
to launch a career in open-source software. Ninety-odd other men got that same
opportunity that year; one woman&amp;nbsp;did.&lt;/p&gt;
&lt;p&gt;Three years later, thanks to the incredible outreach efforts of Jessica
McKellar, the amazing &lt;a class="reference external" href="http://www.pyladies.com/"&gt;PyLadies&lt;/a&gt;, the Ada Initiative, and many others, women
gave a &lt;strong&gt;full third&lt;/strong&gt; of the talks at PyCon&amp;nbsp;2014.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;a href="https://supportada.org/?campaign=python"&gt;&lt;img width="200" style="float: left; margin: 12px;" src="/static/images/blog/miko.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have two sons, a seven-year-old and a four-month-old (yep, that&amp;#8217;s him). With
the second just arrived, I think a lot these days about the work I do. I want
it to be work that will make them proud, that I will be happy to tell them&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;I am ashamed to admit to being part of this industry when I see Kathy Sierra or
Adria Richards or Anita Sarkeesian or &lt;a class="reference external" href="http://www.cracked.com/blog/5-things-i-learned-as-internets-most-hated-person/"&gt;Zoe Quinn&lt;/a&gt; or &lt;a class="reference external" href="http://geekfeminism.wikia.com/wiki/Timeline_of_incidents"&gt;any number of other
women&lt;/a&gt; systematically harassed, threatened, and attacked by gangs of abusive
men for the crime of speaking their minds as&amp;nbsp;women.&lt;/p&gt;
&lt;p&gt;I am ashamed to be part of this industry because of &lt;a class="reference external" href="http://anontechlady.wordpress.com/2014/08/04/my-first-oscon/"&gt;pervasive sexual
harassment&lt;/a&gt; and sexism at tech conferences, in the workplace, and at&amp;nbsp;meetups.&lt;/p&gt;
&lt;p&gt;I want to be able to wholeheartedly celebrate my successes and recommend
open-source software communities, but I know that I&amp;#8217;ve been &lt;a class="reference external" href="http://whatever.scalzi.com/2012/05/15/straight-white-male-the-lowest-difficulty-setting-there-is/"&gt;playing on the
easy setting&lt;/a&gt;: paid more and presumed competent because of my gender, skin
color, cultural similarity to those in positions of power, and &lt;a class="reference external" href="http://www.confreaks.com/videos/4454-DjangoCon2014-all-you-need-is-l"&gt;other
attributes that I did nothing to&amp;nbsp;earn&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But I know we can change our industry. I&amp;#8217;m proud to be a part of the Python
community when I see it &lt;a class="reference external" href="http://www.forbes.com/sites/women2/2013/04/09/record-number-of-women-give-tech-talks-at-pycon-2013/"&gt;leading&lt;/a&gt; the &lt;a class="reference external" href="http://adainitiative.org/2012/10/leading-open-source-conference-pycon-us-shares-responsereport-guidelines-for-harassment/"&gt;way&lt;/a&gt; in working towards being
welcoming to people who don&amp;#8217;t all look, talk, and act like me. I&amp;#8217;m happy to be
in the Python community (and humbled by all the hard work it took to get here)
when I see&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Hello from your &lt;a href="https://twitter.com/pycon"&gt;@PyCon&lt;/a&gt; Diversity Outreach Chair. % PyCon talks by women: (2011: 1%), (2012: 7%), (2013: 15%), (2014: 33%). Outreach&amp;nbsp;works.&lt;/p&gt;&amp;mdash; Jessica McKellar (@jessicamckellar) &lt;a href="https://twitter.com/jessicamckellar/status/413009020522221568"&gt;December 17, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m proud to be part of the Django community when we adopt a strong &lt;a class="reference external" href="https://www.djangoproject.com/conduct/"&gt;Code of
Conduct&lt;/a&gt; (in consultation with Ada Initiative!), and when &lt;a class="reference external" href="http://geekfeminism.org/2013/08/15/that-time-i-wasnt-harassed-at-a-conference/"&gt;&amp;#8220;that time I wasn&amp;#8217;t
harassed at a conference&amp;#8221;&lt;/a&gt; is a description of&amp;nbsp;DjangoCon.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s the community that I want to be a part of, and the Ada Initiative is
&lt;a class="reference external" href="http://adainitiative.org/what-we-do/workshops-and-training/"&gt;working every day&lt;/a&gt; to &lt;a class="reference external" href="http://adacamp.org/"&gt;make it a reality&lt;/a&gt;. If that&amp;#8217;s the community you want
too, join me and &lt;a class="reference external" href="https://supportada.org/?campaign=python"&gt;donate today&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://supportada.org/?campaign=python"&gt;&lt;img width="600" height="175" src="https://adainitiative.org/counters/2014counter-python.svg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks for&amp;nbsp;listening,&lt;/p&gt;
&lt;p&gt;Carl&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://oddbird.net/feed.atom">
    <title type="text">PostgreSQL transactions and SQLAlchemy</title>
    <id>http://oddbird.net/2014/06/14/sqlalchemy-postgres-autocommit</id>
    <updated>2014-06-14T00:00:00Z</updated>
    <link href="http://oddbird.net/2014/06/14/sqlalchemy-postgres-autocommit" />
    <author>
      <name>OddBird</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; defaults to implicitly opening a new transaction on your first
database query. If you prefer to start your transactions explicitly instead,
I&amp;#8217;ve documented here my explorations in getting that to&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;There are several different layers at play, so let&amp;#8217;s review from the&amp;nbsp;top:&lt;/p&gt;
&lt;section id="transactions-in-postgresql"&gt;
&lt;h2&gt;Transactions in&amp;nbsp;PostgreSQL&lt;/h2&gt;
&lt;p&gt;Since version 7.4, PostgreSQL itself always operates in &amp;#8220;autocommit&amp;#8221; mode. This
means that if you haven&amp;#8217;t started a transaction, and you run a query that
changes data, it takes effect immediately; there is no need to commit it, and
no option to roll it&amp;nbsp;back.&lt;/p&gt;
&lt;p&gt;If you want to group several queries together into an atomic unit of work, such
that you can commit them all together or roll them back all together, you first
issue a &lt;code&gt;BEGIN&lt;/code&gt; statement, then your queries, and then either a &lt;code&gt;COMMIT&lt;/code&gt; or
&lt;code&gt;ROLLBACK&lt;/code&gt; statement.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="transactions-in-pep-249"&gt;
&lt;h2&gt;Transactions in &lt;span class="caps"&gt;PEP&lt;/span&gt;&amp;nbsp;249&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://legacy.python.org/dev/peps/pep-0249/"&gt;&lt;span class="caps"&gt;PEP&lt;/span&gt; 249&lt;/a&gt; specifies a common &lt;span class="caps"&gt;API&lt;/span&gt; for all Python database adapter libraries,
making it easier to write cross-database-compatible code. Almost all the
popular Python database adapters are (or claim or try to be) &lt;span class="caps"&gt;PEP&lt;/span&gt; 249&amp;nbsp;compliant.&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;PEP&lt;/span&gt; 249 &lt;span class="caps"&gt;API&lt;/span&gt; specifies a different behavior, which I will call &amp;#8220;implicit
transactions.&amp;#8221; There isn&amp;#8217;t even a way to explicitly start a transaction in the
&lt;span class="caps"&gt;PEP&lt;/span&gt; 249 &lt;span class="caps"&gt;API&lt;/span&gt;; no &lt;code&gt;begin()&lt;/code&gt; or similar. Instead, you are always in a
transaction; one is automatically started the first time you send a query to
the database after opening a connection, and the first time you send a new
query after ending the previous transaction with a rollback or&amp;nbsp;commit.&lt;/p&gt;
&lt;p&gt;Because Postgres doesn&amp;#8217;t offer this behavior natively, the Postgres Python
adapters (e.g. &lt;a class="reference external" href="http://initd.org/psycopg/docs/"&gt;psycopg2&lt;/a&gt;) have to emulate it themselves in order to be &lt;span class="caps"&gt;PEP&lt;/span&gt;
249 compliant. So by default, the first time you send a query to the database,
psycopg2 will prefix it with a &lt;code&gt;BEGIN&lt;/code&gt; on your&amp;nbsp;behalf.&lt;/p&gt;
&lt;p&gt;In order to get psycopg2 to stop sending these automatic &lt;code&gt;BEGIN&lt;/code&gt; statements
and to behave like Postgres natively does, you set the &lt;a class="reference external" href="http://initd.org/psycopg/docs/connection.html#connection.autocommit"&gt;autocommit property&lt;/a&gt;
of your connection object to &lt;code&gt;True&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code python"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psycopg2&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;psycopg2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'dbname=test'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autocommit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="postgres-has-it-right"&gt;
&lt;h2&gt;Postgres has it&amp;nbsp;right&lt;/h2&gt;
&lt;p&gt;I prefer the &amp;#8216;autocommit&amp;#8217; model. It&amp;#8217;s simple, explicit, and
unsurprising. Queries are never grouped together into a transaction unless you
ask for one. If you issue a &lt;code&gt;COMMIT&lt;/code&gt; or &lt;code&gt;ROLLBACK&lt;/code&gt;, there is never any
doubt about which queries you are committing or rolling back, because you
explicitly issued the &lt;code&gt;BEGIN&lt;/code&gt; to start the&amp;nbsp;transaction.&lt;/p&gt;
&lt;p&gt;I can see some advantage to the implicit-transaction model for
interactive-shell use (you can always roll back your changes if you screw
something up, even if you forgot to &lt;code&gt;BEGIN&lt;/code&gt;), but for general use I think
it&amp;#8217;s more error-prone. If you save a change to the database in one place but
forget to commit, that change will automatically be wrapped up in the same
transaction with later, possibly completely unrelated changes, and may get
blindly rolled back along with them. It wraps read-only &lt;code&gt;SELECT&lt;/code&gt; statements
in useless transactions. And for long-running processes, since even a simple
&lt;code&gt;SELECT&lt;/code&gt; implicitly opens a transaction (and you wouldn&amp;#8217;t intuitively think
you&amp;#8217;d need to commit or rollback after a &lt;code&gt;SELECT&lt;/code&gt;), it&amp;#8217;s very easy to
unintentionally end up with connections in the &amp;#8220;idle in transaction&amp;#8221; state,
where they are doing nothing but still may be holding locks and preventing
Postgres from compacting&amp;nbsp;tables.&lt;/p&gt;
&lt;p&gt;The explicit-transactions (autocommit) model lends itself naturally to Python
idioms like decorators or context managers for handling transactions. These
clearly wrap a section of code (a function, or the block introduced by the
&lt;code&gt;with&lt;/code&gt; statement) as an atomic unit of work that will be committed or rolled
back together. It&amp;#8217;s more difficult to correctly implement such an idiom in the
implicit-transactions model, because there is no explicit start point to a
transaction, so prior queries outside the demarcated block might get wrapped up
in the same transaction (or you have to check when entering the block whether
there are uncommitted queries in an existing transaction, and decide what
should be done with them &amp;#8212; perhaps having to guess, or raise an&amp;nbsp;error.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="django"&gt;
&lt;h2&gt;Django&lt;/h2&gt;
&lt;p&gt;Before we talk about &lt;a class="reference external" href="http://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt;, let&amp;#8217;s discuss the &lt;a class="reference external" href="http://www.djangoproject.com"&gt;Django&lt;/a&gt; &lt;span class="caps"&gt;ORM&lt;/span&gt; briefly for
comparison&amp;nbsp;purposes.&lt;/p&gt;
&lt;p&gt;Up until Django 1.6, Django&amp;#8217;s &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.6/topics/db/transactions/#transactions-upgrading-from-1-5"&gt;transactions &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; used psycopg2 in its default
(&lt;span class="caps"&gt;PEP&lt;/span&gt; 249) mode, but then by default emulated a sort of Python-level
&amp;#8220;autocommit&amp;#8221; mode by automatically issuing commits after &lt;span class="caps"&gt;ORM&lt;/span&gt;-issued&amp;nbsp;queries.&lt;/p&gt;
&lt;p&gt;So in other words, if you were using Django pre-1.6 with Postgres, you had
psycopg2 emulating implicit-transactions on top of Postgres&amp;#8217; native autocommit
by automatically issuing &lt;code&gt;BEGIN&lt;/code&gt; statements on your behalf, and then Django
emulating autocommit atop psycopg2&amp;#8217;s emulated non-autocommit atop Postgres&amp;#8217;
native autocommit, by also automatically issuing &lt;code&gt;COMMIT&lt;/code&gt; statements on your&amp;nbsp;behalf.&lt;/p&gt;
&lt;p&gt;Got all&amp;nbsp;that?&lt;/p&gt;
&lt;p&gt;Thankfully, in Django 1.6 &lt;a class="reference external" href="https://myks.org/en/"&gt;Aymeric Augustin&lt;/a&gt; rewrote Django&amp;#8217;s transaction
support (based in part on &lt;a class="reference external" href="https://github.com/Xof/xact"&gt;prior work by Christophe Pettus&lt;/a&gt;) to use
database-level autocommit natively and only open transactions when explicitly
requested. The core &lt;span class="caps"&gt;API&lt;/span&gt; (really, the only &lt;span class="caps"&gt;API&lt;/span&gt;) is &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.6/topics/db/transactions/#django.db.transaction.atomic"&gt;transactions.atomic&lt;/a&gt;, which
can work as either a decorator or context manager to define an atomic unit of
database work (it can also be nested, using a stack of &lt;a class="reference external" href="http://www.postgresql.org/docs/9.2/static/sql-savepoint.html"&gt;savepoints&lt;/a&gt; to achieve
the effect of nested&amp;nbsp;transactions).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="sqlalchemy"&gt;
&lt;h2&gt;SQLAlchemy&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; follows the lead of &lt;span class="caps"&gt;PEP&lt;/span&gt; 249 and uses implicit-transactions as its
primary mode. Whenever you query the database, a transaction automatically
starts (SQLAlchemy doesn&amp;#8217;t do anything special to make this happen, it&amp;#8217;s just
using the database adapter &amp;#8212; &lt;code&gt;psycopg2&lt;/code&gt; in our case &amp;#8212; in its default
&lt;span class="caps"&gt;PEP&lt;/span&gt;-249-compliant mode), and you can commit that transaction with
&lt;code&gt;session.commit()&lt;/code&gt; or roll it back with &lt;code&gt;session.rollback()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Although I don&amp;#8217;t prefer this mode, it&amp;#8217;s a reasonable choice for SQLAlchemy to
rely on &lt;span class="caps"&gt;PEP&lt;/span&gt; 249 consistency across the board rather than implementing custom
code for native-autocommit mode in all its many supported&amp;nbsp;databases.&lt;/p&gt;
&lt;p&gt;But I&amp;#8217;m using Postgres, I know how its native autocommit mode works, and that&amp;#8217;s
the behavior I want with SQLAlchemy. Can I make that&amp;nbsp;work?&lt;/p&gt;
&lt;section id="sqlalchemy-s-autocommit-mode-not-what-you-think"&gt;
&lt;h3&gt;SQLAlchemy&amp;#8217;s autocommit mode &amp;#8212; not what you&amp;nbsp;think&lt;/h3&gt;
&lt;p&gt;I soon found &lt;a class="reference external" href="http://docs.sqlalchemy.org/en/rel_0_9/orm/session.html#autocommit-mode"&gt;autocommit mode&lt;/a&gt; in SQLAlchemy&amp;#8217;s documentation, and thought I
had my answer &amp;#8212; but no such luck. SQLAlchemy&amp;#8217;s autocommit mode is roughly
parallel to the &amp;#8220;autocommit&amp;#8221; in Django pre-1.6 (albeit smarter): it emulates
autocommit over top of non-autocommit database adapters by automatically
committing an implicit transaction after you send queries that change the
database. It doesn&amp;#8217;t put the database connections into true autocommit mode, so
it still wraps reads in unnecessary&amp;nbsp;transactions.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="turning-on-real-autocommit"&gt;
&lt;h3&gt;Turning on real&amp;nbsp;autocommit&lt;/h3&gt;
&lt;p&gt;Happily, setting all of SQLAlchemy&amp;#8217;s psycopg2 connections into real autocommit
became quite easy in SQLAlchemy 0.8.2: SQLAlchemy&amp;#8217;s psycopg2 &amp;#8220;dialect&amp;#8221; now
exposes an &lt;code&gt;AUTOCOMMIT&lt;/code&gt; transaction isolation level, and selecting it sets
&lt;code&gt;autocommit=True&lt;/code&gt; on all the psycopg2&amp;nbsp;connections.&lt;/p&gt;
&lt;pre class="code python"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;
&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'postgresql://test'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;isolation_level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;span class="caps"&gt;AUTOCOMMIT&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We haven&amp;#8217;t discussed transaction isolation levels yet (and I won&amp;#8217;t in detail
here). They control the visibility of changes between multiple concurrent
transactions. The &lt;a class="reference external" href="http://www.postgresql.org/docs/9.2/static/transaction-iso.html"&gt;Postgres documentation&lt;/a&gt; summarizes the options it&amp;nbsp;provides.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a bit odd that SQLAlchemy (&lt;a class="reference external" href="http://initd.org/psycopg/docs/extensions.html#psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT"&gt;and psycopg2&lt;/a&gt;) provide &lt;code&gt;AUTOCOMMIT&lt;/code&gt; as a
transaction isolation level, since Postgres has no such isolation level, and
autocommit-mode isn&amp;#8217;t really an isolation level at all. (In fact, if you choose
the &lt;code&gt;AUTOCOMMIT&lt;/code&gt; &amp;#8220;isolation level&amp;#8221; in psycopg2, it turns on the connection&amp;#8217;s
&lt;code&gt;autocommit&lt;/code&gt; property but actually resets the real Postgres isolation level
to &amp;#8220;read committed&amp;#8221;, the&amp;nbsp;default.)&lt;/p&gt;
&lt;p&gt;But regardless, &lt;code&gt;isolation_level='AUTOCOMMIT'&lt;/code&gt; is the incantation needed to
get all of our SQLAlchemy psycopg2 connections into true autocommit&amp;nbsp;mode.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="starting-a-transaction"&gt;
&lt;h3&gt;Starting a&amp;nbsp;transaction&lt;/h3&gt;
&lt;p&gt;If we didn&amp;#8217;t want to use transactions at all, this would be all we
need. SQLAlchemy would happily hum along thinking it has a transaction but
actually not having one at all (just like it does for databases that don&amp;#8217;t
support&amp;nbsp;transactions).&lt;/p&gt;
&lt;p&gt;But we do want to use transactions, so we need a way to start one. The natural
&lt;span class="caps"&gt;API&lt;/span&gt; for this already exists in SQLAlchemy: &lt;code&gt;session.begin()&lt;/code&gt;. Since
SQLAlchemy assumes that its database adapter will automatically start
transactions, &lt;code&gt;session.begin()&lt;/code&gt; never actually issues a &lt;code&gt;BEGIN&lt;/code&gt; to the
database. But we don&amp;#8217;t actually need to issue &lt;code&gt;BEGIN&lt;/code&gt; ourselves either - we
just need to turn off the &lt;code&gt;autocommit&lt;/code&gt; property on our connection, and then
&lt;code&gt;psycopg2&lt;/code&gt; will issue the &lt;code&gt;BEGIN&lt;/code&gt; for&amp;nbsp;us.&lt;/p&gt;
&lt;p&gt;SQLAlchemy gives us a way to hook into the &lt;code&gt;begin()&lt;/code&gt; call: the
&lt;code&gt;after_begin&lt;/code&gt; event, which sends along the relevant database connection. We
have to dig through a few layers of connection-wrapping to get down to the
actual psycopg2 connection object, but that&amp;#8217;s not&amp;nbsp;hard:&lt;/p&gt;
&lt;pre class="code python"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;

&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'postgresql://test'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;isolation_level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;span class="caps"&gt;AUTOCOMMIT&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autocommit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;&amp;#64;event.listens_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'after_begin'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;receive_after_begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;When a (non-nested) transaction begins, turn autocommit off.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;dbapi_connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;dbapi_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autocommit&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;dbapi_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autocommit&lt;/span&gt;
    &lt;span class="n"&gt;dbapi_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autocommit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;session.begin()&lt;/code&gt; &lt;span class="caps"&gt;API&lt;/span&gt; can also be used to initiate &amp;#8220;nested transactions&amp;#8221;
using savepoints. In this case autocommit should already have been turned off
on the connection by the outer &amp;#8220;real&amp;#8221; transaction, so we don&amp;#8217;t need to do
anything. We add in a couple asserts to validate our assumptions about what the
autocommit state should be in each case, and in the non-nested case we turn
autocommit&amp;nbsp;off.&lt;/p&gt;
&lt;p&gt;We also pass &lt;code&gt;autocommit=True&lt;/code&gt; to the &lt;code&gt;Session&lt;/code&gt;; this turns on SQLAlchemy&amp;#8217;s
autocommit mode (mentioned above). This is necessary to prevent SQLAlchemy from
automatically starting a transaction (and thus triggering our &lt;code&gt;after_begin&lt;/code&gt;
listener) on the first&amp;nbsp;query.&lt;/p&gt;
&lt;p&gt;This is the piece that I&amp;#8217;m least happy with, as it means we have to worry about
what is meant by the &lt;a class="reference external" href="http://docs.sqlalchemy.org/en/rel_0_9/orm/session.html#autocommit-mode"&gt;vague warnings&lt;/a&gt; in the documentation that Session
autocommit is a &amp;#8220;legacy mode of usage&amp;#8221; that &amp;#8220;can in some cases lead to
concurrent connection checkouts&amp;#8221; and that we should turn off the Session&amp;#8217;s
autoflush and autoexpire features. So far I haven&amp;#8217;t done the latter; waiting to
see what (if any) problems ensue in&amp;nbsp;practice.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="back-to-autocommit-when-the-transaction-ends"&gt;
&lt;h3&gt;Back to autocommit when the transaction&amp;nbsp;ends&lt;/h3&gt;
&lt;p&gt;One thing remains lacking from our implementation. When a transaction ends, we
need to restore that connection to autocommit mode&amp;nbsp;again.&lt;/p&gt;
&lt;p&gt;This isn&amp;#8217;t entirely straightforward. SQLAlchemy gives us three events
corresponding to the end of a transaction: &lt;code&gt;after_rollback&lt;/code&gt;,
&lt;code&gt;after_commit&lt;/code&gt;, and &lt;code&gt;after_transaction_end&lt;/code&gt;. But these are all fired after
the connection has been &amp;#8220;closed&amp;#8221; (that is, returned to the connection pool),
and &lt;code&gt;after_transaction_end&lt;/code&gt; is only fired once per SQLAlchemy
&lt;code&gt;SessionTransaction&lt;/code&gt; object, which can involve multiple connections. For both
of these reasons, none of those events provide us with a connection&amp;nbsp;object.&lt;/p&gt;
&lt;p&gt;In order to get around this, I maintain a mapping of &lt;code&gt;SessionTransaction&lt;/code&gt;
objects to the connection(s) that have had &lt;code&gt;autocommit&lt;/code&gt; turned off due to
that transaction. Then I listen to &lt;code&gt;after_transaction_end&lt;/code&gt; and restore
autocommit on all the appropriate&amp;nbsp;connections:&lt;/p&gt;
&lt;pre class="code python"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;

&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'postgresql://test'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;isolation_level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;span class="caps"&gt;AUTOCOMMIT&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autocommit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;dconns_by_trans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="nd"&gt;&amp;#64;event.listens_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'after_begin'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;receive_after_begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;When a transaction begins, turn autocommit off.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;dbapi_connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;dbapi_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autocommit&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;dbapi_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autocommit&lt;/span&gt;
    &lt;span class="n"&gt;dbapi_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autocommit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;dconns_by_trans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;dbapi_connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;&amp;#64;event.listens_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'after_transaction_end'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;receive_after_transaction_end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Restore autocommit where this transaction turned it off.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dconns_by_trans&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dbapi_connection&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dconns_by_trans&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;dbapi_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autocommit&lt;/span&gt;
            &lt;span class="n"&gt;dbapi_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autocommit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;dconns_by_trans&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="a-transaction-context-manager"&gt;
&lt;h3&gt;A transaction context&amp;nbsp;manager&lt;/h3&gt;
&lt;p&gt;Now that we have autocommit mode working, here&amp;#8217;s an example of a rough
equivalent to &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.6/topics/db/transactions/#django.db.transaction.atomic"&gt;transaction.atomic&lt;/a&gt; for SQLAlchemy (unlike
&lt;a class="reference external" href="https://docs.djangoproject.com/en/1.6/topics/db/transactions/#django.db.transaction.atomic"&gt;transaction.atomic&lt;/a&gt; this doesn&amp;#8217;t work as a decorator, but adding that is just
a matter of some&amp;nbsp;boilerplate):&lt;/p&gt;
&lt;pre class="code python"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;contextlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;contextmanager&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;BaseSession&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseSession&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_in_atomic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="nd"&gt;&amp;#64;contextmanager&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;atomic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Transaction context manager.

        Will commit the transaction on successful completion
        of the block, or roll it back on error.

        Supports nested usage (via savepoints).

        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;nested&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_in_atomic&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nested&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_in_atomic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rollback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_in_atomic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;It would be possible to implement this same context manager in SQLAlchemy&amp;#8217;s
default implicit-transactions mode: you just leave out the call to
&lt;code&gt;session.begin()&lt;/code&gt; in the non-nested case (because an implicit transaction
will already have been created). But that implementation then suffers from the
bug where database queries from prior to the context-managed block could be
included within its transaction. With some further cleverness you might be able
to figure out on entering the context manager whether the existing transaction
is already &amp;#8220;dirty&amp;#8221; (though this is not trivial to determine), and then either
raise an error or implicitly commit the existing transaction &amp;#8212; but neither of
these solutions are appealing compared to the conceptual simplicity of
autocommit &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; explicit&amp;nbsp;transactions.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Is this all worth it? Perhaps not; it&amp;#8217;s possible to work around the problems
with implicit transactions by being careful. And I&amp;#8217;m not yet clear on the costs
of this approach &amp;#8212; just how bad are the problems SQLAlchemy&amp;#8217;s docs warn about
with its autocommit&amp;nbsp;mode?&lt;/p&gt;
&lt;p&gt;In any case, while I understand why SQLAlchemy is well-advised to generally
follow &lt;span class="caps"&gt;PEP&lt;/span&gt; 249 for its default behavior, I would love if it had
(scary-warning-free) support for an &amp;#8220;autocommit and explicit transactions&amp;#8221; mode
on those databases/adapters with good support for&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;The code from this post is pulled together in &lt;a class="reference external" href="https://gist.github.com/carljm/57bfb8616f11bceaf865"&gt;a gist&lt;/a&gt;. I also have tests for
it, but they are currently integrated with the project where I&amp;#8217;m using this. If
there&amp;#8217;s enough interest (and it works well on this project) I might be
convinced to package it up and release it&amp;nbsp;properly.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="acknowledgments"&gt;
&lt;h2&gt;Acknowledgments&lt;/h2&gt;
&lt;p&gt;Thanks to &lt;a class="reference external" href="https://twitter.com/zzzeek"&gt;Mike Bayer&lt;/a&gt; for writing SQLAlchemy(!) and for pointing me towards
the &lt;code&gt;AUTOCOMMIT&lt;/code&gt; &amp;#8220;isolation level&amp;#8221; setting. Thanks to &lt;a class="reference external" href="http://thebuild.com/blog/"&gt;Christophe Pettus&lt;/a&gt;
for my initial education in Postgres&amp;#8217; transaction behavior, and &lt;a class="reference external" href="https://myks.org/en/"&gt;Aymeric
Augustin&lt;/a&gt; for the excellent implementation in Django&amp;nbsp;1.6+.&lt;/p&gt;
&lt;/section&gt;
</content>
  </entry>
  <entry xml:base="http://oddbird.net/feed.atom">
    <title type="text">2013</title>
    <id>http://oddbird.net/2013/12/30/sixth-year</id>
    <updated>2013-12-30T00:00:00Z</updated>
    <link href="http://oddbird.net/2013/12/30/sixth-year" />
    <author>
      <name>OddBird</name>
    </author>
    <content type="html">&lt;p&gt;As we wrap up our sixth year, it seems like a good time to share our
first-ever year-end retrospective. Here&amp;#8217;s 2013, OddBird&amp;nbsp;style:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://rachelnabors.com/"&gt;Rachel Nabors&lt;/a&gt; and &lt;a class="reference external" href="http://itsmisscs.me/"&gt;Claudina Sarahe&lt;/a&gt; joined the team!
We&amp;#8217;re not into growth for its own sake
(it&amp;#8217;s taken us six years),
but Rachel and Claudina kick ass
and we&amp;#8217;re lucky to have them working with&amp;nbsp;us.&lt;/li&gt;
&lt;li&gt;We had a great time working on &lt;a class="reference external" href="https://www.portfoliyo.org/"&gt;Portfoliyo&lt;/a&gt; with &lt;a class="reference external" href="https://www.theknetwork.org/"&gt;The K Network&lt;/a&gt;
and collaborating on a new ed-tech project with &lt;a class="reference external" href="http://junyo.com/"&gt;Junyo&lt;/a&gt;.
We like solving problems that&amp;nbsp;matter.&lt;/li&gt;
&lt;li&gt;We&amp;#8217;re slowly developing Miriam&amp;#8217;s &lt;a class="reference external" href="http://www.greengreenmud.com/"&gt;novel&lt;/a&gt;
(which has gotten some &lt;a class="reference external" href="http://iloveepoetry.com/?p=2571"&gt;rave previews&lt;/a&gt;),
and working on a (still pre-alpha) collaborative authoring&amp;nbsp;tool.&lt;/li&gt;
&lt;li&gt;Miriam &lt;a class="reference external" href="http://miriamsuzanne.com/pres/"&gt;spoke&lt;/a&gt; at &lt;a class="reference external" href="http://sassconf.com/"&gt;SassConf&lt;/a&gt;, the &lt;a class="reference external" href="http://www.meetup.com/nyc-sass/"&gt;New York Sass &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Compass Meetup&lt;/a&gt;,
and the &lt;a class="reference external" href="http://www.brakhagecenter.net/"&gt;Brakhage Center for the Media Arts&lt;/a&gt;.
He&amp;#8217;ll appear again in 2014 at &lt;a class="reference external" href="https://twitter.com/theMixinSF"&gt;The Mixin&lt;/a&gt;
and others &lt;span class="caps"&gt;TBA&lt;/span&gt;.
Carl delivered &lt;a class="reference external" href="http://pyvideo.org/video/1674/getting-started-with-automated-testing"&gt;a talk&lt;/a&gt; at &lt;a class="reference external" href="https://us.pycon.org/"&gt;PyCon&lt;/a&gt;
and will speak at &lt;a class="reference external" href="http://confoo.ca/"&gt;ConFoo&lt;/a&gt; and again at &lt;a class="reference external" href="https://us.pycon.org/"&gt;PyCon&lt;/a&gt; in&amp;nbsp;2014.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jgerigmeyer"&gt;We&lt;/a&gt; &lt;a class="reference external" href="https://github.com/carljm"&gt;released&lt;/a&gt; &lt;a class="reference external" href="https://github.com/ericam"&gt;code&lt;/a&gt;
(and even maintained most of it afterwards!)
Because we like open-source software,
and wouldn&amp;#8217;t be here without&amp;nbsp;it.&lt;/li&gt;
&lt;li&gt;We sponsored &lt;a class="reference external" href="http://sassconf.com/"&gt;SassConf&lt;/a&gt; and are silver sponsors of &lt;a class="reference external" href="https://us.pycon.org/"&gt;PyCon&lt;/a&gt; 2014. It&amp;#8217;s one
way to give back to the communities that have helped form our skills and
built the tools we use every&amp;nbsp;day.&lt;/li&gt;
&lt;li&gt;We donated to &lt;a class="reference external" href="http://www.pyladies.com/"&gt;PyLadies&lt;/a&gt;, the &lt;a class="reference external" href="http://adainitiative.org/"&gt;Ada Initiative&lt;/a&gt;, &lt;a class="reference external" href="http://www.blackgirlscode.com/"&gt;Black Girls Code&lt;/a&gt;, and
&lt;a class="reference external" href="http://www.macile.org/"&gt;&lt;span class="caps"&gt;MACILE&lt;/span&gt;&lt;/a&gt;. And you should,&amp;nbsp;too!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for a great year, everyone. See you around in&amp;nbsp;2014!&lt;/p&gt;
&lt;p&gt;— the Odds&amp;nbsp;Bird&lt;/p&gt;
</content>
  </entry>
</feed>

